/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/PCj2KuvTC06
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {FormEvent, useState} from 'react';

//package
import {CoreMessage, streamText} from 'ai';
import {chromeai} from 'chrome-ai';
import {InfoIcon} from 'lucide-react';

// ui components
import {Avatar, AvatarImage, AvatarFallback} from '@/components/ui/avatar';
import {Input} from '@/components/ui/input';
import {Button} from '@/components/ui/button';

// components
import {EmptyScreen} from '@/components/empty-screen.component';

// helpers
import {MemoizedReactMarkdown} from '@/helpers/markdown.helper';

// hooks
import {useScrollAnchor} from '@/hooks/use-scroll-anchor.hook';

const SendIcon = (props: any) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m22 2-7 20-4-9-9-4Z" />
      <path d="M22 2 11 13" />
    </svg>
  );
};

const UserMessage = ({message}: {message: CoreMessage}) => {
  return (
    <div className="flex items-start justify-end gap-3">
      <div className="max-w-[80%] rounded-lg bg-primary p-3 text-primary-foreground">
        {/* @ts-expect-error */}
        <p className="text-sm">{message.content}</p>
      </div>
      <Avatar className="h-8 w-8 shrink-0">
        <AvatarImage src="/placeholder-user.jpg" />
        <AvatarFallback>US</AvatarFallback>
      </Avatar>
    </div>
  );
};

const BotMessage = ({message}: {message: CoreMessage}) => {
  return (
    <div className="flex items-start gap-3">
      <Avatar className="h-8 w-8 shrink-0">
        <AvatarImage src="/placeholder-user.jpg" />
        <AvatarFallback>BO</AvatarFallback>
      </Avatar>
      <div className="max-w-[80%] rounded-lg bg-muted p-3">
        <p className="text-sm">
          <MemoizedReactMarkdown className={'prose'}>
            {/* @ts-expect-error */}
            {message.content}
          </MemoizedReactMarkdown>
        </p>
      </div>
    </div>
  );
};

export const ChatComponent = ({
  error,
  openModal,
}: {
  error: any;
  openModal: () => void;
}) => {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<CoreMessage[]>([]);
  const {containerRef, messagesRef, scrollToBottom} = useScrollAnchor();

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    scrollToBottom();
    e.preventDefault();
    const newMessages: CoreMessage[] = [
      ...messages,
      {content: input, role: 'user'},
    ];
    setInput('');
    setMessages(newMessages);

    try {
      const {textStream} = await streamText({
        model: chromeai('text', {}),
        // system: "Complete the conversation as if you were the model!",
        prompt: newMessages.slice(-1)[0].content as string,
      });
      for await (const textPart of textStream) {
        setMessages([...newMessages, {role: 'assistant', content: textPart}]);
      }
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <div className="flex h-screen flex-col">
      <div className="flex-1 overflow-auto p-4" ref={containerRef}>
        <div
          className="flex min-h-full flex-col gap-4 overflow-visible py-4"
          ref={messagesRef}
        >
          {messages.length > 0 ? (
            messages.map((m, i) =>
              m.role === 'user' ? (
                <UserMessage key={i} message={m} />
              ) : m.role === 'assistant' ? (
                <BotMessage key={i} message={m} />
              ) : null,
            )
          ) : (
            <div className="mx-auto my-auto flex h-full w-full max-w-md items-center justify-center text-center">
              <EmptyScreen />
            </div>
          )}
        </div>
      </div>
      <form
        onSubmit={handleSubmit}
        className="sticky bottom-0 w-full border-t border-muted bg-background px-4 py-3"
      >
        <div>
          <div className="flex space-x-2">
            <div className="relative w-full">
              <Input
                placeholder="Type your message..."
                className="w-full resize-none rounded-lg pr-16"
                disabled={error}
                value={input}
                min={8}
                onChange={(e) => setInput(e.target.value)}
              />
              <Button
                type="submit"
                variant="ghost"
                size="icon"
                className="absolute right-3 top-1/2 -translate-y-1/2"
              >
                <SendIcon className="h-5 w-5" />
                <span className="sr-only">Send</span>
              </Button>
            </div>
            <Button
              type="button"
              variant="secondary"
              size="icon"
              onClick={openModal}
            >
              <InfoIcon />
            </Button>
          </div>
        </div>
      </form>
    </div>
  );
};
